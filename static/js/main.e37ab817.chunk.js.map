{"version":3,"sources":["device_connecting.svg","warning_icon.png","ZioV8_1.2.7.zip","ProgressBar.js","InputFieldTypes.js","EepromFields.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Track","styled","div","Thumb","props","percentage","ProgressBar","clamp","min","value","max","Math","this","message","Component","enc","TextDecoder","toUTF8Array","str","utf8","i","length","charcode","charCodeAt","push","InputFieldTypes","handleNumberChange","event","preventDefault","on_update_value","target","name","handleTextChange","max_bytes","clampStringLength","count_name","handleDateChange","date","utf8str","arr","ArrayBuffer","dv","DataView","j","setUint8","decode","inputField","e","eeprom_field","val","current_value","show_input_error","is_locked","locked","input_type","type","autoComplete","onChange","disabled","match","regex","selected","strictParsing","dateFormat","title","description","full_name","input_desc","src","warning_icon","alt","width","height","btZioServiceUUID","cmdCharUUID","flashAddressCharUUID","flashDataCharUUID","eraseCmd","writeCmd","sleep","ms","Promise","resolve","setTimeout","EepromFields","getBtService","a","device","gatt","connect","btServer","getPrimaryService","btZioService","getCharacteristic","btCmdChar","btflashAddressChar","btflashDataChar","setState","server","service","cmdChar","flashAddressChar","flashDataChar","console","log","state","readEeprom","eeprom_operation_in_progress","eeprom_progress_percentage","progress_bar_message","eepromValues","EepromJSON","array","getFlashDataArray","address","concat","per","address_i","setUint32","hw_rev_str","getUint8","toString","textAsBytesArray","utf8string","Uint8Array","from","year","round","month","day","Date","isNaN","erase_function_enabled","write_function_enabled","writeEeprom","k","alert","eraseFlashData","digit_chars","split","parseInt","getUint32","b","d","getFullYear","getMonth","getDate","addr","undefined","writeFlashDataInt","bt_adv_name","update_status_msg","writeValue","of","waitForCmdComplete","maxSeconds","secondsRemaining","getCmdStatus","readValue","result","cmdStatus","getValuesFromFile","have_import_file","valuesObj","JSON","parse","importFile","value_name","date_fmt","saveValuesToFile","outputObj","NaN","isValid","format","fileName","json","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","updateStateFromChild","handleFileInputChange","fr","FileReader","input_file","files","onload","readAsText","getFlashDataInt","buffer","dataVal","dv1","dv2","flashData","onClick","accept","map","key","App","statusMessage","device_connected","device_connecting","firmware_version","device_name","dfu_zipFile","dfu_manifest","dfu_mode_on","dfu_step_msg","dfu_step_state","dfu_obj","dfu_app_image","dfu_base_image","dfu_mode_connecting","pairDevice","pairedDevice","navigator","bluetooth","requestDevice","filters","services","optionalServices","then","addEventListener","disconnectDevice","characteristic","deviceDidConnect","catch","error","loadDfuFile","my_file","fetch","response","ok","Error","status","arrayBuffer","JSZip","loadAsync","zip_file","file","async","content","manifest","getBaseImage","base_image","getAppImage","app_image","getImage","types","entry","res","initFile","dat_file","imageFile","bin_file","data","initData","imageData","updateFirmware","dfu","image","update","doDfu","SecureDfu","crc","buf","dfu_progress","EVENT_PROGRESS","object","progress","currentBytes","totalBytes","fimware_zip","reading_eeprom","reading_eeprom_progress","disconnect","updateStatusMsg","msg","className","device_connecting_svg","rel","Boolean","window","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e37ab817.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/device_connecting.c594fc6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_icon.e0e4b6b3.png\";","module.exports = __webpack_public_path__ + \"static/media/ZioV8_1.2.7.44073a78.zip\";","import React, { Component } from \"react\";\r\nimport styled from 'styled-components'\r\n\r\nconst Track = styled.div`\r\n    width: 50%;\r\n    height: 20px;\r\n    background: #2c4251;\r\n    border-radius: 10px;\r\n    box-shadow: inset 0 0 5px #000;\r\n    align-items: center;\r\n    display: inline-block;\r\n`;\r\n\r\nconst Thumb = styled.div`\r\n    width: ${props => props.percentage}%;\r\n    height: 100%;\r\n    background: #6bccf9;\r\n    border-radius: 8px;\r\n    transition: width 0.3s ease-in-out;\r\n`;\r\n\r\nclass ProgressBar extends Component {\r\n\r\n    clamp = (min, value, max) => {\r\n        return Math.min(Math.max(min, value), max);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.props.message}<br/>\r\n                <Track>\r\n                <Thumb percentage={this.clamp(0, this.props.percentage, 100)}/>\r\n                </Track>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProgressBar","import React, { Component } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport warning_icon from './warning_icon.png';\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\nfunction toUTF8Array(str) {\r\n    var utf8 = [];\r\n    if(str!=null){\r\n        for (var i=0; i < str.length; i++) {\r\n            var charcode = str.charCodeAt(i);\r\n            if (charcode < 0x80) utf8.push(charcode);\r\n            else if (charcode < 0x800) {\r\n                utf8.push(0xc0 | (charcode >> 6), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n                utf8.push(0xe0 | (charcode >> 12), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            // surrogate pair\r\n            else {\r\n                i++;\r\n                charcode = (((charcode&0x3ff)<<10)|(str.charCodeAt(i)&0x3ff)) + 0x010000;\r\n                utf8.push(0xf0 | (charcode >>18), \r\n                        0x80 | ((charcode>>12) & 0x3f), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n        }\r\n    }\r\n    return utf8;\r\n}\r\n\r\nclass InputFieldTypes extends Component {\r\n\r\n    handleNumberChange = (event) => {\r\n        event.preventDefault();\r\n        this.props.on_update_value(event.target.name, event.target.value);\r\n    }\r\n\r\n    handleTextChange = (max_bytes, event) => {\r\n        event.preventDefault();\r\n\r\n        //ensure string does not exceed max bytes\r\n        var str = this.clampStringLength(event.target.value, max_bytes)\r\n        this.props.on_update_value(event.target.name, str);\r\n        \r\n        //also update the count field\r\n        var count_name = event.target.name + '_count'\r\n        var length = toUTF8Array(str).length\r\n        this.props.on_update_value(count_name, length);\r\n    }\r\n\r\n    handleDateChange = (name, date) => {\r\n        this.props.on_update_value(name, date);\r\n    }\r\n\r\n    clampStringLength = (str, max_bytes) => {\r\n        //check str exists\r\n        if(str){\r\n            //convert our string to utf-8\r\n            var utf8str = toUTF8Array(str);\r\n\r\n            //get length of string\r\n            var length = 0;\r\n            for(var i = 0; i < max_bytes; i++){\r\n                if(i < utf8str.length){    \r\n                    //check end of string         \r\n                    if((utf8str[i] === 0x00) || (utf8str[i] === 0xff))\r\n                    {\r\n                        break;\r\n                    }\r\n                    else{                        \r\n                        length++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //set each byte to the data view\r\n            let arr = new ArrayBuffer(length)\r\n            let dv = new DataView(arr);\r\n            for(var j = 0; j < length; j++){\r\n                dv.setUint8(j, utf8str[j])\r\n            }\r\n            \r\n            //convert dataview back to string\r\n            var new_str = enc.decode(arr)\r\n            return new_str\r\n        }\r\n\r\n        //else return empty string\r\n        return \"\"      \r\n    }\r\n\r\n    render() \r\n    {\r\n        let e = this.props.eeprom_field;\r\n        let val = this.props.current_value;\r\n        let inputField;\r\n        let show_input_error = false;\r\n        let is_locked = (e.locked === \"true\")\r\n\r\n        //selects the correct input field\r\n        if(e.input_type === \"text\")\r\n        {\r\n            //clamp text\r\n            val = this.clampStringLength(val, e.max_bytes)\r\n            \r\n            inputField = <input \r\n                type=\"text\" \r\n                value={val} \r\n                autoComplete=\"off\" \r\n                name={e.name} \r\n                onChange={(event) => this.handleTextChange(e.max_bytes, event)} \r\n                disabled={is_locked}\r\n            />\r\n\r\n            //check regex\r\n            show_input_error = (!val || val.match(e.regex)) ? false : true\r\n        }\r\n        else if(e.input_type === \"number\")\r\n        {         \r\n            inputField = <input type=\"number\" value={val || \"\"} autoComplete=\"off\" name={e.name} onChange={this.handleNumberChange} disabled={is_locked}/>\r\n        }\r\n        else if(e.input_type === \"count\")\r\n        {\r\n            inputField = <input type=\"number\" value={val || 0} autoComplete=\"off\" name={e.name} onChange={this.handleNumberChange} disabled/>\r\n        }\r\n        else if(e.input_type === \"date\")\r\n        {\r\n            inputField = <DatePicker selected={val || \"\"} strictParsing autoComplete=\"off\" dateFormat=\"yyyy/MM/dd\" name={e.name} onChange={date => this.handleDateChange(e.name, date)} />\r\n        }\r\n\r\n        return (\r\n            <div>          \r\n                <span title={e.description}>{e.full_name} : </span>\r\n                <span title={e.input_desc}>{inputField}</span>\r\n                {show_input_error && ( \r\n                    <img src={warning_icon} alt=\"incorrect input\" title={e.input_desc} width=\"20\" height=\"20\"/>\r\n                )}\r\n            </div>    \r\n        )   \r\n    }\r\n}\r\n\r\nexport default InputFieldTypes","import React, { Component } from \"react\";\r\nimport EepromJSON from './EEPROMspec.json'\r\nimport ProgressBar from './ProgressBar' \r\nimport InputFieldTypes from './InputFieldTypes'\r\nimport { isValid, format } from 'date-fns'\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\n//expected characteristic UUIDs\r\nconst btZioServiceUUID = '16d30bc1-f148-49bd-b127-8042df63ded0'\r\nconst cmdCharUUID = '16d30bc8-f148-49bd-b127-8042df63ded0'\r\nconst flashAddressCharUUID = '16d30bcf-f148-49bd-b127-8042df63ded0'\r\nconst flashDataCharUUID = '16d30bd0-f148-49bd-b127-8042df63ded0'\r\nconst eraseCmd = 5\r\nconst writeCmd = 6\r\n\r\nfunction toUTF8Array(str) {\r\n    var utf8 = [];\r\n    if(str!=null){\r\n        for (var i=0; i < str.length; i++) {\r\n            var charcode = str.charCodeAt(i);\r\n            if (charcode < 0x80) utf8.push(charcode);\r\n            else if (charcode < 0x800) {\r\n                utf8.push(0xc0 | (charcode >> 6), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n                utf8.push(0xe0 | (charcode >> 12), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            // surrogate pair\r\n            else {\r\n                i++;\r\n                charcode = (((charcode&0x3ff)<<10)|(str.charCodeAt(i)&0x3ff)) + 0x010000;\r\n                utf8.push(0xf0 | (charcode >>18), \r\n                        0x80 | ((charcode>>12) & 0x3f), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n        }\r\n    }\r\n    return utf8;\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nclass EepromFields extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            eeprom_operation_in_progress: false,\r\n            eeprom_progress_percentage: 0,\r\n            have_import_file: false,\r\n            erase_function_enabled: false,\r\n            write_function_enabled: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getBtService();\r\n    }\r\n\r\n    //get relevant bluetooth components\r\n    getBtService = async () => {\r\n        try\r\n        {\r\n            let btServer = await this.props.device.gatt.connect();\r\n            let btZioService = await btServer.getPrimaryService(btZioServiceUUID);\r\n            let btCmdChar = await btZioService.getCharacteristic(cmdCharUUID);\r\n            let btflashAddressChar = await btZioService.getCharacteristic(flashAddressCharUUID);\r\n            let btflashDataChar = await btZioService.getCharacteristic(flashDataCharUUID);\r\n            this.setState({\r\n                device: this.props.device,\r\n                server: btServer,\r\n                service: btZioService,\r\n                cmdChar: btCmdChar,\r\n                flashAddressChar: btflashAddressChar,\r\n                flashDataChar: btflashDataChar,\r\n            })\r\n            console.log(this.state);\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"error\", error)\r\n        }  \r\n    }\r\n    \r\n    //process to read the entire contents of the EEPROM\r\n    readEeprom = async () => {\r\n        \r\n        //read in progress\r\n        this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'reading'});\r\n        \r\n        //read & save entire eeprom to array\r\n        let eepromValues = [];\r\n        for(var i = 0; i < EepromJSON.array.length; i++){\r\n            eepromValues = eepromValues.concat(await this.getFlashDataArray(EepromJSON.array[i].address, EepromJSON.array[i].length));\r\n            var per = 100 * ((i + 1) / EepromJSON.array.length);\r\n            this.setState({eeprom_progress_percentage: per});\r\n        }\r\n        console.log('values read from eeprom: ', eepromValues);\r\n\r\n        //convert array and set it to state\r\n        var address_i = 0;\r\n        for(i = 0; i < EepromJSON.array.length; i++){\r\n\r\n            //if its our hardware revision special case\r\n            if(EepromJSON.array[i].name === \"hw_rev\"){\r\n\r\n                //convert eepromValues[address_i] to hw rev string\r\n                let arr = new ArrayBuffer(4)\r\n                let dv = new DataView(arr);\r\n                dv.setUint32(0, eepromValues[address_i], false);\r\n                var hw_rev_str = dv.getUint8(1).toString() + '.' + dv.getUint8(2).toString() + '.'+ dv.getUint8(3).toString()\r\n                this.setState({\r\n                    [EepromJSON.array[i].name]: hw_rev_str,\r\n                });   \r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is a number\r\n            else if((EepromJSON.array[i].input_type === \"number\")||(EepromJSON.array[i].input_type === \"count\")){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    //if it is a blank eeprom value (0xffffffff)\r\n                    if(eepromValues[address_i] === 0xffffffff){\r\n                        //save it as blank\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: '',\r\n                        });  \r\n                    }\r\n                    else{\r\n                        //save value\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: eepromValues[address_i].toString(),\r\n                        });      \r\n                    }\r\n\r\n                                 \r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is text\r\n            else if(EepromJSON.array[i].input_type === \"text\"){\r\n         \r\n                let length = EepromJSON.array[i].length;\r\n                let textAsBytesArray = [];\r\n                //separate each uint32 to uint8 bytes for the whole length of the string\r\n                for(var j = 0; j < length; j++){\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr);\r\n                    dv.setUint32(0, eepromValues[address_i + j], false);   \r\n                    textAsBytesArray.push(dv.getUint8(0));\r\n                    textAsBytesArray.push(dv.getUint8(1));\r\n                    textAsBytesArray.push(dv.getUint8(2));\r\n                    textAsBytesArray.push(dv.getUint8(3));\r\n                }\r\n\r\n                //convert the array to utf-8\r\n                var utf8string = enc.decode(Uint8Array.from(textAsBytesArray));\r\n                this.setState({\r\n                    [EepromJSON.array[i].name]: utf8string,\r\n                });               \r\n                \r\n                //next address\r\n                address_i += length;\r\n            }\r\n            \r\n            //if it is a date\r\n            else if(EepromJSON.array[i].input_type === \"date\"){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n\r\n                    //extract date yyyyMMdd\r\n                    var year = Math.round(eepromValues[address_i] / 10000);\r\n                    var month =  Math.round((eepromValues[address_i] % 10000) / 100);\r\n                    var day =  Math.round(eepromValues[address_i] % 100);\r\n                    var date = year + '/' + month + '/' + day;\r\n                    date = new Date(date);\r\n                    \r\n                    //check for valid date\r\n                    if(!isNaN(date)){\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: date,\r\n                        });\r\n                    }\r\n                    //set blank\r\n                    else{\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: '',\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }            \r\n        }\r\n\r\n        //done\r\n        this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});\r\n\r\n        //once done enable erase\r\n        this.setState({erase_function_enabled: true, write_function_enabled: true});\r\n    }\r\n\r\n    //process to write the entire contents of the EEPROM\r\n    writeEeprom = async () => {\r\n\r\n        //check regex for each string input\r\n        for(var k = 0; k < EepromJSON.array.length; k++){\r\n            if(EepromJSON.array[k].input_type === \"text\"){\r\n                console.log(this.state[EepromJSON.array[k].name])\r\n                var str = this.state[EepromJSON.array[k].name] ? this.state[EepromJSON.array[k].name] : ''\r\n                //regex check\r\n                if(str && !str.match(EepromJSON.array[k].regex)){\r\n                    alert(EepromJSON.array[k].full_name + ' field is in the incorrect format');\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n        //must erase first!\r\n        await this.eraseFlashData();\r\n        console.log('erase complete')\r\n\r\n        //write in progress\r\n        this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'writing'});\r\n\r\n        //convert all the values from the state into a uint32 array \r\n        let eepromValues = [];\r\n        var address_i = 0;\r\n        for(var i = 0; i < EepromJSON.array.length; i++){\r\n\r\n            //if its our hardware revision special case\r\n            if(EepromJSON.array[i].name === \"hw_rev\"){\r\n\r\n                //convert this.state[EepromJSON.array[i].name] to uint32\r\n                if(this.state[EepromJSON.array[i].name])\r\n                {\r\n                    var digit_chars = this.state[EepromJSON.array[i].name].split('.')\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr)\r\n                    console.log(digit_chars)\r\n                    dv.setUint8(0, 0);\r\n                    dv.setUint8(1, parseInt(digit_chars[0]));\r\n                    dv.setUint8(2, parseInt(digit_chars[1]));\r\n                    dv.setUint8(3, parseInt(digit_chars[2]));\r\n                    eepromValues[address_i] = dv.getUint32(0)\r\n                    console.log(eepromValues[address_i])\r\n                }\r\n                //else it is a blank string\r\n                else{\r\n                    eepromValues[address_i] = 0\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n            \r\n            //if it is a number or count\r\n            else if((EepromJSON.array[i].input_type === \"number\")||(EepromJSON.array[i].input_type === \"count\")){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    eepromValues[address_i] = this.state[EepromJSON.array[i].name];\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is text\r\n            else if(EepromJSON.array[i].input_type === \"text\"){\r\n         \r\n                let length = EepromJSON.array[i].length;\r\n\r\n                //convert our string to utf-8\r\n                var utf8str = toUTF8Array(this.state[EepromJSON.array[i].name]);\r\n\r\n                //set the array with the utf bytes\r\n                for(var j = 0; j < length; j++){\r\n                    //combine utf-8 bytes into uint32 number\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr);                 \r\n                    for(var b = 0; b < 4; b++){\r\n                        //set dataview bytes\r\n                        if(b+(4*j) < utf8str.length){\r\n                            dv.setUint8(b, utf8str[b+(4*j)])\r\n                        }\r\n                        //set the remaining bytes to zero\r\n                        else{\r\n                            dv.setUint8(b, 0);\r\n                        }\r\n                    }\r\n                    //set value to the uint32 of the dataview\r\n                    var value = dv.getUint32(0);\r\n                    eepromValues[address_i + j] = value;\r\n                }\r\n\r\n                //next address\r\n                address_i += length;\r\n            }\r\n            \r\n            //if it is a date\r\n            else if(EepromJSON.array[i].input_type === \"date\"){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    var d = new Date(this.state[EepromJSON.array[i].name]);\r\n                    eepromValues[address_i] = (d.getFullYear() * 10000) + ((d.getMonth() + 1) * 100) + d.getDate();\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }                      \r\n        }\r\n\r\n        console.log('values to write to eeprom: ', eepromValues);\r\n\r\n        //write eeprom array   \r\n        for(var addr = 0; addr < eepromValues.length; addr++){\r\n            \r\n            //check for null and undefined \r\n            if((eepromValues[addr] === undefined)||isNaN(eepromValues[addr])||(eepromValues[addr] == null)){\r\n                eepromValues[addr] = 0xffffffff;\r\n            }\r\n\r\n            //write\r\n            await this.writeFlashDataInt(addr, eepromValues[addr]);\r\n            var per = 20 + 80 * ((addr + 1) / eepromValues.length);\r\n            this.setState({eeprom_progress_percentage: per});\r\n        }\r\n\r\n        //update status message\r\n        if(this.state.bt_adv_name !== ''){\r\n            this.props.update_status_msg('Connected to ' + this.state.bt_adv_name)\r\n        }\r\n\r\n        //done\r\n        this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});\r\n    }\r\n\r\n    //erase all data in the EEPROM\r\n    eraseFlashData = async () => {\r\n        try{\r\n            this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'erasing'});        \r\n            await this.state.cmdChar.writeValue(Uint8Array.of(eraseCmd))\r\n            await this.waitForCmdComplete(5);\r\n            this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});  \r\n        }\r\n        catch(e){\r\n            console.log('error erasing flash: ', e);\r\n        }\r\n    }\r\n\r\n    //function that waits for the command status to be zero\r\n    waitForCmdComplete = async (maxSeconds) => {\r\n        \r\n        //loop to check for completion\r\n        var secondsRemaining = maxSeconds;\r\n        do{\r\n            //get a result\r\n            let result = await this.getCmdStatus();\r\n            if(result === 0){\r\n                this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100});  \r\n                return true;\r\n            }\r\n\r\n            //sleep 1 second\r\n            await sleep(1000);\r\n            secondsRemaining--;\r\n            var percentage = 100 * ((maxSeconds - secondsRemaining) / maxSeconds);\r\n            this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: percentage});  \r\n        }\r\n        //if we havent timed out\r\n        while(secondsRemaining > 0);\r\n\r\n        console.log('command timed out')\r\n        return false\r\n    }\r\n\r\n    //get the cmdChar value to determine the CMD result status\r\n    getCmdStatus = async () => {\r\n        let val = await this.state.cmdChar.readValue();\r\n        let result = await val.getUint8(0);\r\n        this.setState({cmdStatus: result})\r\n        return await result;\r\n    }\r\n\r\n    //process to get form values from file\r\n    getValuesFromFile = async () => {\r\n        if(this.state.have_import_file){\r\n            var valuesObj = JSON.parse(this.state.importFile);\r\n            //go through array in the valuesObj\r\n            for(var i = 0; i < valuesObj.array.length; i++){\r\n                //ge the key name of the value\r\n                var value_name = EepromJSON.array[i].name;\r\n                //if the value is a date\r\n                if(EepromJSON.array[i].input_type === \"date\")\r\n                {\r\n                    //save to state as date\r\n                    var date_fmt = new Date(valuesObj.array[i][value_name]);\r\n                    this.setState({\r\n                        [value_name]: date_fmt,\r\n                    })\r\n                }\r\n                else\r\n                {\r\n                    //save to state\r\n                    this.setState({\r\n                        [value_name]: valuesObj.array[i][value_name],\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //save form values to file\r\n    saveValuesToFile = async () => {\r\n        var outputObj = [];\r\n        //go through all the keys in the EepromJSON\r\n        for(var i = 0; i < EepromJSON.array.length; i++){       \r\n            //if the value is a date\r\n            if(EepromJSON.array[i].input_type === \"date\")\r\n            {\r\n                var date_fmt = NaN;\r\n                //check if date field is valid\r\n                if(isValid(this.state[EepromJSON.array[i].name])){\r\n                    date_fmt = format(this.state[EepromJSON.array[i].name], 'yyyy/MM/dd');\r\n                }                \r\n                outputObj.push({[EepromJSON.array[i].name]: date_fmt})\r\n            }\r\n            else\r\n            {\r\n                outputObj.push({[EepromJSON.array[i].name]: this.state[EepromJSON.array[i].name]})\r\n            }\r\n        }\r\n        const fileName = \"Eeprom_value_template\";\r\n        const json = '{\"array\":' + JSON.stringify(outputObj) + '}';\r\n        const blob = new Blob([json],{type:'application/json'});\r\n        const href = await URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + \".json\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    //update this.state from Child\r\n    updateStateFromChild = (name, value) => {\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    //reads the values from file\r\n    handleFileInputChange = (event) => {\r\n        var fr = new FileReader();\r\n        var input_file = event.target.files[0];\r\n        if(input_file != null){\r\n            //function for when the filereader is finished\r\n            fr.onload = (e) =>\r\n            { \r\n                this.setState({importFile: e.target.result, have_import_file: true})\r\n                console.log(this.state.importFile)\r\n            }\r\n            //begin reading the file\r\n            fr.readAsText(input_file); \r\n        }\r\n    }\r\n\r\n    //Read an Int32 from an EEPROM address\r\n    getFlashDataInt = async (address) => {\r\n        try{        \r\n            //write address to flashAddressChar\r\n            let dv = new DataView(new ArrayBuffer(4));\r\n            dv.setUint32(0, address, false);\r\n            await this.state.flashAddressChar.writeValue(dv.buffer);\r\n            \r\n            //read address from flashDataChar\r\n            let dataVal = await this.state.flashDataChar.readValue();\r\n            let result = await dataVal.getUint32(0, true);\r\n            // console.log('read: ' + result + ' from address ' + address);\r\n            return await result;\r\n        }\r\n        catch(e){\r\n            console.log('error reading flash: ', e);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    //Write an Int32 to an EEPROM address\r\n    writeFlashDataInt = async (address, value) => {\r\n        try{        \r\n            //write address to flashAddressChar\r\n            let dv1 = new DataView(new ArrayBuffer(4));\r\n            dv1.setUint32(0, address, false);\r\n            await this.state.flashAddressChar.writeValue(dv1.buffer);\r\n            \r\n            //write value to flashDataChar\r\n            let dv2 = new DataView(new ArrayBuffer(4));\r\n            dv2.setUint32(0, value, false);\r\n            await this.state.flashDataChar.writeValue(dv2.buffer);\r\n            \r\n            //write writeCmd to the cmdChar\r\n            await this.state.cmdChar.writeValue(Uint8Array.of(writeCmd));\r\n\r\n            // console.log('wrote: ' + value + ' to address ' + address);\r\n        }\r\n        catch(e){\r\n            console.log('error writing flash: ', e);\r\n        }        \r\n    }\r\n\r\n    //Read an array of Int32 from an EEPROM address\r\n    getFlashDataArray = async (address, length) => {\r\n        var flashData = [];\r\n        for(var i = 0; i < length; i++)\r\n        {\r\n            var result = await this.getFlashDataInt(address + i);\r\n            flashData.push(result);\r\n        }\r\n        return await flashData;\r\n    }\r\n    \r\n    render() {\r\n        //return\r\n        return (\r\n            <div>\r\n                {/* Read/Write Buttons */}\r\n                <div>\r\n                    <button onClick={this.readEeprom} disabled={this.state.eeprom_operation_in_progress}>Read All Data</button>\r\n                    <button onClick={this.writeEeprom} disabled={!this.state.write_function_enabled || this.state.eeprom_operation_in_progress}>Write All Data</button>\r\n                    <button onClick={this.eraseFlashData} disabled={!this.state.erase_function_enabled || this.state.eeprom_operation_in_progress}>Erase All Data</button>\r\n                </div>\r\n                \r\n                {/* Import/Export values from file */}\r\n                <div>\r\n                    <input type=\"file\" accept=\".json\" autoComplete=\"off\" onChange={this.handleFileInputChange} disabled={this.state.eeprom_operation_in_progress}/>\r\n                    <div>\r\n                        <button onClick={this.getValuesFromFile} disabled={this.state.eeprom_operation_in_progress}>Import Values from File</button>\r\n                        <button onClick={this.saveValuesToFile} disabled={this.state.eeprom_operation_in_progress}>Export Values to File</button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Show/Hide Eeprom Progress Bar */}\r\n                {this.state.eeprom_operation_in_progress && ( \r\n                <ProgressBar message={this.state.progress_bar_message} percentage={this.state.eeprom_progress_percentage}/>\r\n                )}   \r\n                \r\n                {/* All Eeprom Fields */}\r\n                {EepromJSON.array.map(e => \r\n                    <InputFieldTypes key={e.name} eeprom_field={e} current_value={this.state[e.name]} on_update_value={this.updateStateFromChild} />          \r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EepromFields","import React, { Component, cloneElement } from \"react\";\r\nimport device_connecting_svg from './device_connecting.svg';\r\nimport EepromFields from './EepromFields.js'\r\nimport ProgressBar from './ProgressBar'\r\nimport './App_AJ.css';\r\nimport crc from \"crc-32\"\r\nimport SecureDfu, { BluetoothLEScanFilterInit } from \"web-bluetooth-dfu\"\r\nimport fimware_zip from './ZioV8_1.2.7.zip'\r\nimport JSZip from \"jszip\"\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\n//expected characteristic UUIDs\r\nconst btZioServiceUUID = '16d30bc1-f148-49bd-b127-8042df63ded0'\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    statusMessage: \"Click Connect to Begin\",\r\n    device_connected: false,\r\n    device_connecting: false,\r\n    firmware_version: \"reading...\",\r\n    device_name: null,\r\n    dfu_zipFile: null,\r\n    dfu_manifest: null,\r\n    dfu_mode_on: false,\r\n    dfu_step_msg: 'Prepare Firmware File',\r\n    dfu_step_state: 0,\r\n    dfu_obj: null,\r\n    dfu_app_image: null,\r\n    dfu_base_image: null,\r\n\r\n    \r\n    dfu_mode_connecting: false,\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('Zio Setup Centre v0.16.2');\r\n  }\r\n\r\n  //process to begin pairing\r\n  pairDevice = () => {\r\n    \r\n    this.setState({\r\n      statusMessage: 'Pairing...',\r\n      device_connecting: true,\r\n      pairedDevice: null,\r\n    })\r\n\r\n    //connect to device then get firmware revision\r\n    navigator.bluetooth.requestDevice({\r\n      filters: [{\r\n        services: ['device_information']\r\n      }],\r\n      optionalServices: [btZioServiceUUID]\r\n    })\r\n    .then(device => {\r\n      device.addEventListener('gattserverdisconnected', this.disconnectDevice);\r\n      console.log(\"pairedDevice\", device);\r\n      this.setState({ \r\n        device_name: device.name, \r\n        pairedDevice: device,\r\n      })\r\n      return device.gatt.connect();\r\n    })\r\n    .then(server => {\r\n      return server.getPrimaryService('device_information');\r\n    })\r\n    .then(service => {\r\n      return service.getCharacteristic('firmware_revision_string');\r\n    })  \r\n    .then(characteristic => {\r\n      return characteristic.readValue();\r\n    })\r\n    .then(value => {\r\n      this.setState({\r\n        firmware_version: 'v' + enc.decode(value),\r\n        statusMessage: 'Connected to ' + this.state.device_name,\r\n      });\r\n      this.deviceDidConnect();\r\n    })\r\n    .catch(error => { \r\n      console.error(\"Connection failed\", error);\r\n      \r\n      this.disconnectDevice();\r\n    });\r\n  }\r\n\r\n  // Load a file, return the bytes in that file as an array\r\n  loadDfuFile = async (my_file) => {\r\n\r\n    //get the local file\r\n    console.log(my_file);\r\n    const response = await fetch(my_file);\r\n    if (!response.ok) {\r\n        throw new Error(\"HTTP error \" + response.status);\r\n    }\r\n    //convert to byte array\r\n    const array = new Uint8Array(await response.arrayBuffer());\r\n\r\n    //unzip the zip file\r\n    JSZip.loadAsync(array)\r\n    .then(zip_file => {\r\n      console.log(zip_file);\r\n      this.setState({\r\n        dfu_zipFile: zip_file,\r\n      }) \r\n      try{\r\n          return this.state.dfu_zipFile.file(\"manifest.json\").async(\"string\");\r\n      } catch(e) {\r\n          throw new Error(\"Unable to find manifest, is this a proper DFU package?\");\r\n      }\r\n    })\r\n    .then(content => {\r\n      this.setState({\r\n        dfu_manifest: JSON.parse(content).manifest,\r\n      }) \r\n      console.log(this.state.dfu_manifest);\r\n    })\r\n    .then(() => {\r\n      return this.getBaseImage()\r\n    })\r\n    .then((base_image) => {\r\n      this.setState({\r\n        dfu_base_image: base_image,\r\n      })\r\n    })\r\n    .then(() => {\r\n      return this.getAppImage()\r\n    })\r\n    .then((app_image) => {\r\n      this.setState({\r\n        dfu_app_image: app_image,\r\n      })\r\n    })\r\n  }\r\n\r\n  // gets the images from the zip\r\n  getImage = async (types) => {\r\n    for (var type of types) {\r\n      console.log('checking if the update contains a ' + type)\r\n      if (this.state.dfu_manifest[type]) {\r\n          console.log(type + ' exists')\r\n          var entry = this.state.dfu_manifest[type];\r\n          var res = {\r\n              type: type,\r\n              initFile: entry.dat_file,\r\n              imageFile: entry.bin_file\r\n          };\r\n\r\n          return this.state.dfu_zipFile.file(res.initFile).async(\"arraybuffer\")\r\n          .then(data => {\r\n              res.initData = data;\r\n              return this.state.dfu_zipFile.file(res.imageFile).async(\"arraybuffer\")\r\n          })\r\n          .then(data => {\r\n              res.imageData = data;\r\n              return res;\r\n          });\r\n      }\r\n      else{\r\n        console.log('update does not contain a ' + type)\r\n      }\r\n    }\r\n  };  \r\n  \r\n  //gets base image\r\n  getBaseImage = async (types) => {\r\n    return this.getImage([\"softdevice\", \"bootloader\", \"softdevice_bootloader\"]);\r\n  }\r\n\r\n  //gets app image\r\n  getAppImage = async (types) => {\r\n    return this.getImage([\"application\"]);\r\n  }\r\n\r\n  // updates firmware image\r\n  updateFirmware = async (dfu, device, image) => {\r\n    try{\r\n      console.log(device);\r\n      console.log(image.initData);\r\n      console.log(image.imageData);\r\n      await dfu.update(device, image.initData, image.imageData);\r\n    }\r\n    catch(e){\r\n      console.log('UPDATE ERROR ' + e)\r\n    }\r\n  }\r\n\r\n  //dfu process\r\n  doDfu = async () => {\r\n\r\n      //dfu_step_state = 0; prepare firmware & dfu\r\n      if(this.state.dfu_step_state === 0){\r\n        \r\n        //set dfu\r\n        var dfu = await new SecureDfu(crc.buf, navigator.bluetooth);\r\n        this.setState({\r\n          dfu_obj: dfu,\r\n        })\r\n\r\n        // add event listener for un update progress\r\n        this.setState({ dfu_progress: 0 })\r\n        this.state.dfu_obj.addEventListener(SecureDfu.EVENT_PROGRESS, event => {\r\n          if (event.object === \"firmware\") {\r\n            var progress = event.currentBytes / event.totalBytes\r\n            console.log(progress);\r\n            this.setState({ dfu_progress: progress })\r\n          }\r\n        });\r\n\r\n        //get the content and manifest from the zip file\r\n        await this.loadDfuFile(fimware_zip)\r\n\r\n        //set state\r\n        this.setState({\r\n          dfu_step_state: 1,\r\n          dfu_step_msg: 'Save app image'\r\n        })\r\n      }\r\n\r\n      //save the app image into state\r\n      else if(this.state.dfu_step_state === 1){\r\n        //save the app image into state\r\n        // var app_image = await this.getAppImage();\r\n        // this.setState({\r\n        //   dfu_app_image: app_image,\r\n        // })\r\n\r\n        //set state\r\n        this.setState({\r\n          dfu_step_state: 2,\r\n          dfu_step_msg: 'Select Zio Device'\r\n        })\r\n      }\r\n\r\n      //dfu_step_state = 2; set to DFU mode\r\n      else if(this.state.dfu_step_state === 2){\r\n\r\n        //get the device\r\n        this.state.dfu_obj.requestDevice(true)\r\n        .then(device => {\r\n\r\n          //device not selected\r\n          if(device === null){         \r\n            //set state\r\n            this.setState({\r\n              dfu_step_state: 3,\r\n              dfu_step_msg: 'Select Dfu Device (1)'\r\n            })\r\n          }\r\n\r\n          //device updating\r\n          else{\r\n            this.updateFirmware(this.state.dfu_obj, device, this.state.dfu_app_image);\r\n            //set state\r\n            this.setState({\r\n              dfu_step_state: 0,\r\n              dfu_step_msg: 'Updating First Go!'\r\n            })\r\n          }\r\n\r\n        });\r\n\r\n      }\r\n\r\n      //dfu_step_state = 3; perform the update\r\n      else if(this.state.dfu_step_state === 3){\r\n\r\n        //get the device\r\n        this.state.dfu_obj.requestDevice(true)\r\n        .then(device => {\r\n\r\n          //device not selected\r\n          if(device === null){         \r\n            //set state\r\n            this.setState({\r\n              dfu_step_state: 3,\r\n              dfu_step_msg: 'Select Dfu Device (2)'\r\n            })\r\n          }\r\n\r\n          //device updating\r\n          else{\r\n            this.updateFirmware(this.state.dfu_obj, device, this.state.dfu_app_image);\r\n            //set state\r\n            this.setState({\r\n              dfu_step_state: 3,\r\n              dfu_step_msg: 'Updating Second Go!'\r\n            })\r\n          }\r\n          \r\n        });\r\n\r\n      }\r\n\r\n  }\r\n\r\n  //process after connection\r\n  deviceDidConnect = async () => {\r\n    this.setState({\r\n      device_connecting: false,\r\n      device_connected: true,\r\n      reading_eeprom: true,\r\n      reading_eeprom_progress: 0,\r\n    })\r\n  }\r\n\r\n  //process to disconnect\r\n  disconnectDevice = () => {\r\n\r\n    if(this.state.pairedDevice != null){\r\n      this.state.pairedDevice.gatt.disconnect();\r\n      console.log('Device ' + this.state.device_name + ' is disconnected');      \r\n    }\r\n    this.setState({\r\n      device_connected: false,\r\n      device_connecting: false,\r\n      statusMessage: 'Click Connect to Begin',\r\n      device_name: null,\r\n      pairedDevice: null,\r\n    })\r\n  }\r\n\r\n  //set status message from child component\r\n  updateStatusMsg = (msg) => {\r\n    this.setState({statusMessage: msg})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <h1>Welcome to the Zio Setup Centre</h1>\r\n          <div>{this.state.statusMessage}</div><br/>\r\n        </header>\r\n\r\n        <div className=\"connect-options\">\r\n\r\n          {/* Show/Hide Connect Button */}\r\n          {!this.state.device_connected && !this.state.device_connecting && ( \r\n          <button className=\"button\" onClick={this.pairDevice}>Connect</button>\r\n          )}\r\n\r\n          {/* Show/Hide Connecting svg */}\r\n          {!this.state.device_connected && this.state.device_connecting && ( \r\n          <img src={device_connecting_svg} alt=\"connecting\" />\r\n          )}            \r\n\r\n          {/* Show/Hide Disconnect Button */}\r\n          {this.state.device_connected && !this.state.device_connecting && ( \r\n          <button className=\"button\" onClick={this.disconnectDevice}>Disconnect</button>\r\n          )}\r\n\r\n        </div>\r\n\r\n        {/* Firmware updater */}\r\n        <div className=\"firmware-updater\">\r\n          {/* Show/Hide Fields */}\r\n          {this.state.device_connected && ( \r\n          <div>\r\n            <h2>Firmware Version: {this.state.firmware_version}</h2>\r\n            <p>For an online tool to update the firmware version please <a href=\"https://thegecko.github.io/web-bluetooth-dfu/examples/web.html\" target=\"_blank\" rel=\"noopener noreferrer\">click here</a></p>\r\n            <br/><br/>\r\n          </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Fields to be edited */}\r\n        <div className=\"eeprom-fields\">\r\n          {/* Show/Hide Fields */}\r\n          {this.state.device_connected && ( \r\n          <EepromFields device={this.state.pairedDevice} update_status_msg={this.updateStatusMsg} />\r\n          )}\r\n        </div>\r\n\r\n        <br/>\r\n        <br/>\r\n        <p>If you have any problems, <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdo2MIEHSg9ZsYYtN0h7M2preLRf5cg_PhW9mownfdtNeCjAw/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\"> click here</a> to report to Zio Health.</p>\r\n        <br/>\r\n        <p>Last Updated 23rd Aug 2020</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}