{"version":3,"sources":["ProgressBar.js","InputFieldTypes.js","EepromFields.js","App.js","serviceWorker.js","index.js","device_connecting.svg","warning_icon.png"],"names":["Track","styled","div","Thumb","props","percentage","ProgressBar","clamp","min","value","max","Math","this","message","Component","enc","TextDecoder","toUTF8Array","str","utf8","i","length","charcode","charCodeAt","push","InputFieldTypes","handleNumberChange","event","preventDefault","on_update_value","target","name","handleTextChange","max_bytes","clampStringLength","count_name","handleDateChange","date","utf8str","arr","ArrayBuffer","dv","DataView","j","setUint8","decode","inputField","e","eeprom_field","val","current_value","show_input_error","is_locked","locked","input_type","type","autoComplete","onChange","disabled","match","regex","selected","strictParsing","dateFormat","title","description","full_name","input_desc","src","warning_icon","alt","width","height","btZioServiceUUID","cmdCharUUID","flashAddressCharUUID","flashDataCharUUID","eraseCmd","writeCmd","sleep","ms","Promise","resolve","setTimeout","EepromFields","getBtService","a","device","gatt","connect","btServer","getPrimaryService","btZioService","getCharacteristic","btCmdChar","btflashAddressChar","btflashDataChar","setState","server","service","cmdChar","flashAddressChar","flashDataChar","console","log","state","readEeprom","eeprom_operation_in_progress","eeprom_progress_percentage","progress_bar_message","eepromValues","EepromJSON","array","getFlashDataArray","address","concat","per","address_i","setUint32","hw_rev_str","getUint8","toString","textAsBytesArray","utf8string","Uint8Array","from","year","round","month","day","Date","isNaN","erase_function_enabled","writeEeprom","k","alert","eraseFlashData","digit_chars","split","parseInt","getUint32","b","d","getFullYear","getMonth","getDate","addr","undefined","writeFlashDataInt","writeValue","of","waitForCmdComplete","maxSeconds","secondsRemaining","getCmdStatus","readValue","result","cmdStatus","getValuesFromFile","have_import_file","valuesObj","JSON","parse","importFile","value_name","date_fmt","saveValuesToFile","outputObj","NaN","isValid","format","fileName","json","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","updateStateFromChild","handleFileInputChange","fr","FileReader","input_file","files","onload","readAsText","getFlashDataInt","buffer","dataVal","dv1","dv2","flashData","onClick","accept","map","key","App","statusMessage","device_connected","device_connecting","firmware_version","device_name","pairDevice","pairedDevice","navigator","bluetooth","requestDevice","filters","services","optionalServices","then","addEventListener","disconnectDevice","characteristic","deviceDidConnect","catch","error","reading_eeprom","reading_eeprom_progress","disconnect","className","device_connecting_svg","Boolean","window","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6730d6b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from 'styled-components'\r\n\r\nconst Track = styled.div`\r\n    width: 50%;\r\n    height: 20px;\r\n    background: #2c4251;\r\n    border-radius: 10px;\r\n    box-shadow: inset 0 0 5px #000;\r\n    align-items: center;\r\n    display: inline-block;\r\n`;\r\n\r\nconst Thumb = styled.div`\r\n    width: ${props => props.percentage}%;\r\n    height: 100%;\r\n    background: #6bccf9;\r\n    border-radius: 8px;\r\n    transition: width 0.3s ease-in-out;\r\n`;\r\n\r\nclass ProgressBar extends Component {\r\n\r\n    clamp = (min, value, max) => {\r\n        return Math.min(Math.max(min, value), max);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.props.message}<br/>\r\n                <Track>\r\n                <Thumb percentage={this.clamp(0, this.props.percentage, 100)}/>\r\n                </Track>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProgressBar","import React, { Component } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport warning_icon from './warning_icon.png';\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\nfunction toUTF8Array(str) {\r\n    var utf8 = [];\r\n    if(str!=null){\r\n        for (var i=0; i < str.length; i++) {\r\n            var charcode = str.charCodeAt(i);\r\n            if (charcode < 0x80) utf8.push(charcode);\r\n            else if (charcode < 0x800) {\r\n                utf8.push(0xc0 | (charcode >> 6), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n                utf8.push(0xe0 | (charcode >> 12), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            // surrogate pair\r\n            else {\r\n                i++;\r\n                charcode = (((charcode&0x3ff)<<10)|(str.charCodeAt(i)&0x3ff)) + 0x010000;\r\n                utf8.push(0xf0 | (charcode >>18), \r\n                        0x80 | ((charcode>>12) & 0x3f), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n        }\r\n    }\r\n    return utf8;\r\n}\r\n\r\nclass InputFieldTypes extends Component {\r\n\r\n    handleNumberChange = (event) => {\r\n        event.preventDefault();\r\n        this.props.on_update_value(event.target.name, event.target.value);\r\n    }\r\n\r\n    handleTextChange = (max_bytes, event) => {\r\n        event.preventDefault();\r\n\r\n        //ensure string does not exceed max bytes\r\n        var str = this.clampStringLength(event.target.value, max_bytes)\r\n        this.props.on_update_value(event.target.name, str);\r\n        \r\n        //also update the count field\r\n        var count_name = event.target.name + '_count'\r\n        var length = toUTF8Array(str).length\r\n        this.props.on_update_value(count_name, length);\r\n    }\r\n\r\n    handleDateChange = (name, date) => {\r\n        this.props.on_update_value(name, date);\r\n    }\r\n\r\n    clampStringLength = (str, max_bytes) => {\r\n        //check str exists\r\n        if(str){\r\n            //convert our string to utf-8\r\n            var utf8str = toUTF8Array(str);\r\n\r\n            //get length of string\r\n            var length = 0;\r\n            for(var i = 0; i < max_bytes; i++){\r\n                if(i < utf8str.length){    \r\n                    //check end of string         \r\n                    if((utf8str[i] === 0x00) || (utf8str[i] === 0xff))\r\n                    {\r\n                        break;\r\n                    }\r\n                    else{                        \r\n                        length++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //set each byte to the data view\r\n            let arr = new ArrayBuffer(length)\r\n            let dv = new DataView(arr);\r\n            for(var j = 0; j < length; j++){\r\n                dv.setUint8(j, utf8str[j])\r\n            }\r\n            \r\n            //convert dataview back to string\r\n            var new_str = enc.decode(arr)\r\n            return new_str\r\n        }\r\n\r\n        //else return empty string\r\n        return \"\"      \r\n    }\r\n\r\n    render() \r\n    {\r\n        let e = this.props.eeprom_field;\r\n        let val = this.props.current_value;\r\n        let inputField;\r\n        let show_input_error = false;\r\n        let is_locked = (e.locked === \"true\")\r\n\r\n        //selects the correct input field\r\n        if(e.input_type === \"text\")\r\n        {\r\n            //clamp text\r\n            val = this.clampStringLength(val, e.max_bytes)\r\n            \r\n            inputField = <input \r\n                type=\"text\" \r\n                value={val} \r\n                autoComplete=\"off\" \r\n                name={e.name} \r\n                onChange={(event) => this.handleTextChange(e.max_bytes, event)} \r\n                disabled={is_locked}\r\n            />\r\n\r\n            //check regex\r\n            show_input_error = (!val || val.match(e.regex)) ? false : true\r\n        }\r\n        else if(e.input_type === \"number\")\r\n        {         \r\n            inputField = <input type=\"number\" value={val || \"\"} autoComplete=\"off\" name={e.name} onChange={this.handleNumberChange} disabled={is_locked}/>\r\n        }\r\n        else if(e.input_type === \"count\")\r\n        {\r\n            inputField = <input type=\"number\" value={val || 0} autoComplete=\"off\" name={e.name} onChange={this.handleNumberChange} disabled/>\r\n        }\r\n        else if(e.input_type === \"date\")\r\n        {\r\n            inputField = <DatePicker selected={val || \"\"} strictParsing autoComplete=\"off\" dateFormat=\"yyyy/MM/dd\" name={e.name} onChange={date => this.handleDateChange(e.name, date)} />\r\n        }\r\n\r\n        return (\r\n            <div>          \r\n                <span title={e.description}>{e.full_name} : </span>\r\n                <span title={e.input_desc}>{inputField}</span>\r\n                {show_input_error && ( \r\n                    <img src={warning_icon} alt=\"incorrect input\" title={e.input_desc} width=\"20\" height=\"20\"/>\r\n                )}\r\n            </div>    \r\n        )   \r\n    }\r\n}\r\n\r\nexport default InputFieldTypes","import React, { Component } from \"react\";\r\nimport EepromJSON from './EEPROMspec.json'\r\nimport ProgressBar from './ProgressBar' \r\nimport InputFieldTypes from './InputFieldTypes'\r\nimport { isValid, format } from 'date-fns'\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\n//expected characteristic UUIDs\r\nconst btZioServiceUUID = '16d30bc1-f148-49bd-b127-8042df63ded0'\r\nconst cmdCharUUID = '16d30bc8-f148-49bd-b127-8042df63ded0'\r\nconst flashAddressCharUUID = '16d30bcf-f148-49bd-b127-8042df63ded0'\r\nconst flashDataCharUUID = '16d30bd0-f148-49bd-b127-8042df63ded0'\r\nconst eraseCmd = 5\r\nconst writeCmd = 6\r\n\r\nfunction toUTF8Array(str) {\r\n    var utf8 = [];\r\n    if(str!=null){\r\n        for (var i=0; i < str.length; i++) {\r\n            var charcode = str.charCodeAt(i);\r\n            if (charcode < 0x80) utf8.push(charcode);\r\n            else if (charcode < 0x800) {\r\n                utf8.push(0xc0 | (charcode >> 6), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n                utf8.push(0xe0 | (charcode >> 12), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n            // surrogate pair\r\n            else {\r\n                i++;\r\n                charcode = (((charcode&0x3ff)<<10)|(str.charCodeAt(i)&0x3ff)) + 0x010000;\r\n                utf8.push(0xf0 | (charcode >>18), \r\n                        0x80 | ((charcode>>12) & 0x3f), \r\n                        0x80 | ((charcode>>6) & 0x3f), \r\n                        0x80 | (charcode & 0x3f));\r\n            }\r\n        }\r\n    }\r\n    return utf8;\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nclass EepromFields extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            eeprom_operation_in_progress: false,\r\n            eeprom_progress_percentage: 0,\r\n            have_import_file: false,\r\n            erase_function_enabled: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getBtService();\r\n    }\r\n\r\n    //get relevant bluetooth components\r\n    getBtService = async () => {\r\n        try\r\n        {\r\n            let btServer = await this.props.device.gatt.connect();\r\n            let btZioService = await btServer.getPrimaryService(btZioServiceUUID);\r\n            let btCmdChar = await btZioService.getCharacteristic(cmdCharUUID);\r\n            let btflashAddressChar = await btZioService.getCharacteristic(flashAddressCharUUID);\r\n            let btflashDataChar = await btZioService.getCharacteristic(flashDataCharUUID);\r\n            this.setState({\r\n                device: this.props.device,\r\n                server: btServer,\r\n                service: btZioService,\r\n                cmdChar: btCmdChar,\r\n                flashAddressChar: btflashAddressChar,\r\n                flashDataChar: btflashDataChar,\r\n            })\r\n            console.log(this.state);\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"error\", error)\r\n        }  \r\n    }\r\n    \r\n    //process to read the entire contents of the EEPROM\r\n    readEeprom = async () => {\r\n        \r\n        //read in progress\r\n        this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'reading'});\r\n        \r\n        //read & save entire eeprom to array\r\n        let eepromValues = [];\r\n        for(var i = 0; i < EepromJSON.array.length; i++){\r\n            eepromValues = eepromValues.concat(await this.getFlashDataArray(EepromJSON.array[i].address, EepromJSON.array[i].length));\r\n            var per = 100 * ((i + 1) / EepromJSON.array.length);\r\n            this.setState({eeprom_progress_percentage: per});\r\n        }\r\n        console.log('values read from eeprom: ', eepromValues);\r\n\r\n        //convert array and set it to state\r\n        var address_i = 0;\r\n        for(i = 0; i < EepromJSON.array.length; i++){\r\n\r\n            //if its our hardware revision special case\r\n            if(EepromJSON.array[i].name === \"hw_rev\"){\r\n\r\n                //convert eepromValues[address_i] to hw rev string\r\n                let arr = new ArrayBuffer(4)\r\n                let dv = new DataView(arr);\r\n                dv.setUint32(0, eepromValues[address_i], false);\r\n                var hw_rev_str = dv.getUint8(1).toString() + '.' + dv.getUint8(2).toString() + '.'+ dv.getUint8(3).toString()\r\n                this.setState({\r\n                    [EepromJSON.array[i].name]: hw_rev_str,\r\n                });   \r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is a number\r\n            else if((EepromJSON.array[i].input_type === \"number\")||(EepromJSON.array[i].input_type === \"count\")){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    //if it is a blank eeprom value (0xffffffff)\r\n                    if(eepromValues[address_i] === 0xffffffff){\r\n                        //save it as blank\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: '',\r\n                        });  \r\n                    }\r\n                    else{\r\n                        //save value\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: eepromValues[address_i].toString(),\r\n                        });      \r\n                    }\r\n\r\n                                 \r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is text\r\n            else if(EepromJSON.array[i].input_type === \"text\"){\r\n         \r\n                let length = EepromJSON.array[i].length;\r\n                let textAsBytesArray = [];\r\n                //separate each uint32 to uint8 bytes for the whole length of the string\r\n                for(var j = 0; j < length; j++){\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr);\r\n                    dv.setUint32(0, eepromValues[address_i + j], false);   \r\n                    textAsBytesArray.push(dv.getUint8(0));\r\n                    textAsBytesArray.push(dv.getUint8(1));\r\n                    textAsBytesArray.push(dv.getUint8(2));\r\n                    textAsBytesArray.push(dv.getUint8(3));\r\n                }\r\n\r\n                //convert the array to utf-8\r\n                var utf8string = enc.decode(Uint8Array.from(textAsBytesArray));\r\n                this.setState({\r\n                    [EepromJSON.array[i].name]: utf8string,\r\n                });               \r\n                \r\n                //next address\r\n                address_i += length;\r\n            }\r\n            \r\n            //if it is a date\r\n            else if(EepromJSON.array[i].input_type === \"date\"){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n\r\n                    //extract date yyyyMMdd\r\n                    var year = Math.round(eepromValues[address_i] / 10000);\r\n                    var month =  Math.round((eepromValues[address_i] % 10000) / 100);\r\n                    var day =  Math.round(eepromValues[address_i] % 100);\r\n                    var date = year + '/' + month + '/' + day;\r\n                    date = new Date(date);\r\n                    \r\n                    //check for valid date\r\n                    if(!isNaN(date)){\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: date,\r\n                        });\r\n                    }\r\n                    //set blank\r\n                    else{\r\n                        this.setState({\r\n                            [EepromJSON.array[i].name]: '',\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }            \r\n        }\r\n\r\n        //done\r\n        this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});\r\n\r\n        //once done enable erase\r\n        this.setState({erase_function_enabled: true});\r\n    }\r\n\r\n    //process to write the entire contents of the EEPROM\r\n    writeEeprom = async () => {\r\n\r\n        //check regex for each string input\r\n        for(var k = 0; k < EepromJSON.array.length; k++){\r\n            if(EepromJSON.array[k].input_type === \"text\"){\r\n                console.log(this.state[EepromJSON.array[k].name])\r\n                var str = this.state[EepromJSON.array[k].name] ? this.state[EepromJSON.array[k].name] : ''\r\n                //regex check\r\n                if(str && !str.match(EepromJSON.array[k].regex)){\r\n                    alert(EepromJSON.array[k].full_name + ' field is in the incorrect format');\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n        //must erase first!\r\n        await this.eraseFlashData();\r\n        console.log('erase complete')\r\n\r\n        //write in progress\r\n        this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'writing'});\r\n\r\n        //convert all the values from the state into a uint32 array \r\n        let eepromValues = [];\r\n        var address_i = 0;\r\n        for(var i = 0; i < EepromJSON.array.length; i++){\r\n\r\n            //if its our hardware revision special case\r\n            if(EepromJSON.array[i].name === \"hw_rev\"){\r\n\r\n                //convert this.state[EepromJSON.array[i].name] to uint32\r\n                if(this.state[EepromJSON.array[i].name])\r\n                {\r\n                    var digit_chars = this.state[EepromJSON.array[i].name].split('.')\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr)\r\n                    console.log(digit_chars)\r\n                    dv.setUint8(0, 0);\r\n                    dv.setUint8(1, parseInt(digit_chars[0]));\r\n                    dv.setUint8(2, parseInt(digit_chars[1]));\r\n                    dv.setUint8(3, parseInt(digit_chars[2]));\r\n                    eepromValues[address_i] = dv.getUint32(0)\r\n                    console.log(eepromValues[address_i])\r\n                }\r\n                //else it is a blank string\r\n                else{\r\n                    eepromValues[address_i] = 0\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n            \r\n            //if it is a number or count\r\n            else if((EepromJSON.array[i].input_type === \"number\")||(EepromJSON.array[i].input_type === \"count\")){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    eepromValues[address_i] = this.state[EepromJSON.array[i].name];\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }\r\n\r\n            //if it is text\r\n            else if(EepromJSON.array[i].input_type === \"text\"){\r\n         \r\n                let length = EepromJSON.array[i].length;\r\n\r\n                //convert our string to utf-8\r\n                var utf8str = toUTF8Array(this.state[EepromJSON.array[i].name]);\r\n\r\n                //set the array with the utf bytes\r\n                for(var j = 0; j < length; j++){\r\n                    //combine utf-8 bytes into uint32 number\r\n                    let arr = new ArrayBuffer(4)\r\n                    let dv = new DataView(arr);                 \r\n                    for(var b = 0; b < 4; b++){\r\n                        //set dataview bytes\r\n                        if(b+(4*j) < utf8str.length){\r\n                            dv.setUint8(b, utf8str[b+(4*j)])\r\n                        }\r\n                        //set the remaining bytes to zero\r\n                        else{\r\n                            dv.setUint8(b, 0);\r\n                        }\r\n                    }\r\n                    //set value to the uint32 of the dataview\r\n                    var value = dv.getUint32(0);\r\n                    eepromValues[address_i + j] = value;\r\n                }\r\n\r\n                //next address\r\n                address_i += length;\r\n            }\r\n            \r\n            //if it is a date\r\n            else if(EepromJSON.array[i].input_type === \"date\"){\r\n\r\n                //make sure it is only one uint32 long\r\n                if(EepromJSON.array[i].length === 1){\r\n                    var d = new Date(this.state[EepromJSON.array[i].name]);\r\n                    eepromValues[address_i] = (d.getFullYear() * 10000) + ((d.getMonth() + 1) * 100) + d.getDate();\r\n                }\r\n\r\n                //next address\r\n                address_i++;\r\n            }                      \r\n        }\r\n\r\n        console.log('values to write to eeprom: ', eepromValues);\r\n\r\n        //write eeprom array   \r\n        for(var addr = 0; addr < eepromValues.length; addr++){\r\n            \r\n            //check for null and undefined \r\n            if((eepromValues[addr] === undefined)||isNaN(eepromValues[addr])||(eepromValues[addr] == null)){\r\n                eepromValues[addr] = 0xffffffff;\r\n            }\r\n\r\n            //write\r\n            await this.writeFlashDataInt(addr, eepromValues[addr]);\r\n            var per = 20 + 80 * ((addr + 1) / eepromValues.length);\r\n            this.setState({eeprom_progress_percentage: per});\r\n        }\r\n\r\n        //done\r\n        this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});\r\n    }\r\n\r\n    //erase all data in the EEPROM\r\n    eraseFlashData = async () => {\r\n        try{\r\n            this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: 0, progress_bar_message: 'erasing'});        \r\n            await this.state.cmdChar.writeValue(Uint8Array.of(eraseCmd))\r\n            await this.waitForCmdComplete(5);\r\n            this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100, progress_bar_message: ''});  \r\n        }\r\n        catch(e){\r\n            console.log('error erasing flash: ', e);\r\n        }\r\n    }\r\n\r\n    //function that waits for the command status to be zero\r\n    waitForCmdComplete = async (maxSeconds) => {\r\n        \r\n        //loop to check for completion\r\n        var secondsRemaining = maxSeconds;\r\n        do{\r\n            //get a result\r\n            let result = await this.getCmdStatus();\r\n            if(result === 0){\r\n                this.setState({eeprom_operation_in_progress: false, eeprom_progress_percentage: 100});  \r\n                return true;\r\n            }\r\n\r\n            //sleep 1 second\r\n            await sleep(1000);\r\n            secondsRemaining--;\r\n            var percentage = 100 * ((maxSeconds - secondsRemaining) / maxSeconds);\r\n            this.setState({eeprom_operation_in_progress: true, eeprom_progress_percentage: percentage});  \r\n        }\r\n        //if we havent timed out\r\n        while(secondsRemaining > 0);\r\n\r\n        console.log('command timed out')\r\n        return false\r\n    }\r\n\r\n    //get the cmdChar value to determine the CMD result status\r\n    getCmdStatus = async () => {\r\n        let val = await this.state.cmdChar.readValue();\r\n        let result = await val.getUint8(0);\r\n        this.setState({cmdStatus: result})\r\n        return await result;\r\n    }\r\n\r\n    //process to get form values from file\r\n    getValuesFromFile = async () => {\r\n        if(this.state.have_import_file){\r\n            var valuesObj = JSON.parse(this.state.importFile);\r\n            //go through array in the valuesObj\r\n            for(var i = 0; i < valuesObj.array.length; i++){\r\n                //ge the key name of the value\r\n                var value_name = EepromJSON.array[i].name;\r\n                //if the value is a date\r\n                if(EepromJSON.array[i].input_type === \"date\")\r\n                {\r\n                    //save to state as date\r\n                    var date_fmt = new Date(valuesObj.array[i][value_name]);\r\n                    this.setState({\r\n                        [value_name]: date_fmt,\r\n                    })\r\n                }\r\n                else\r\n                {\r\n                    //save to state\r\n                    this.setState({\r\n                        [value_name]: valuesObj.array[i][value_name],\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //save form values to file\r\n    saveValuesToFile = async () => {\r\n        var outputObj = [];\r\n        //go through all the keys in the EepromJSON\r\n        for(var i = 0; i < EepromJSON.array.length; i++){       \r\n            //if the value is a date\r\n            if(EepromJSON.array[i].input_type === \"date\")\r\n            {\r\n                var date_fmt = NaN;\r\n                //check if date field is valid\r\n                if(isValid(this.state[EepromJSON.array[i].name])){\r\n                    date_fmt = format(this.state[EepromJSON.array[i].name], 'yyyy/MM/dd');\r\n                }                \r\n                outputObj.push({[EepromJSON.array[i].name]: date_fmt})\r\n            }\r\n            else\r\n            {\r\n                outputObj.push({[EepromJSON.array[i].name]: this.state[EepromJSON.array[i].name]})\r\n            }\r\n        }\r\n        const fileName = \"Eeprom_value_template\";\r\n        const json = '{\"array\":' + JSON.stringify(outputObj) + '}';\r\n        const blob = new Blob([json],{type:'application/json'});\r\n        const href = await URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + \".json\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    //update this.state from Child\r\n    updateStateFromChild = (name, value) => {\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    //reads the values from file\r\n    handleFileInputChange = (event) => {\r\n        var fr = new FileReader();\r\n        var input_file = event.target.files[0];\r\n        if(input_file != null){\r\n            //function for when the filereader is finished\r\n            fr.onload = (e) =>\r\n            { \r\n                this.setState({importFile: e.target.result, have_import_file: true})\r\n                console.log(this.state.importFile)\r\n            }\r\n            //begin reading the file\r\n            fr.readAsText(input_file); \r\n        }\r\n    }\r\n\r\n    //Read an Int32 from an EEPROM address\r\n    getFlashDataInt = async (address) => {\r\n        try{        \r\n            //write address to flashAddressChar\r\n            let dv = new DataView(new ArrayBuffer(4));\r\n            dv.setUint32(0, address, false);\r\n            await this.state.flashAddressChar.writeValue(dv.buffer);\r\n            \r\n            //read address from flashDataChar\r\n            let dataVal = await this.state.flashDataChar.readValue();\r\n            let result = await dataVal.getUint32(0, true);\r\n            // console.log('read: ' + result + ' from address ' + address);\r\n            return await result;\r\n        }\r\n        catch(e){\r\n            console.log('error reading flash: ', e);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    //Write an Int32 to an EEPROM address\r\n    writeFlashDataInt = async (address, value) => {\r\n        try{        \r\n            //write address to flashAddressChar\r\n            let dv1 = new DataView(new ArrayBuffer(4));\r\n            dv1.setUint32(0, address, false);\r\n            await this.state.flashAddressChar.writeValue(dv1.buffer);\r\n            \r\n            //write value to flashDataChar\r\n            let dv2 = new DataView(new ArrayBuffer(4));\r\n            dv2.setUint32(0, value, false);\r\n            await this.state.flashDataChar.writeValue(dv2.buffer);\r\n            \r\n            //write writeCmd to the cmdChar\r\n            await this.state.cmdChar.writeValue(Uint8Array.of(writeCmd));\r\n\r\n            // console.log('wrote: ' + value + ' to address ' + address);\r\n        }\r\n        catch(e){\r\n            console.log('error writing flash: ', e);\r\n        }        \r\n    }\r\n\r\n    //Read an array of Int32 from an EEPROM address\r\n    getFlashDataArray = async (address, length) => {\r\n        var flashData = [];\r\n        for(var i = 0; i < length; i++)\r\n        {\r\n            var result = await this.getFlashDataInt(address + i);\r\n            flashData.push(result);\r\n        }\r\n        return await flashData;\r\n    }\r\n    \r\n    render() {\r\n        //return\r\n        return (\r\n            <div>\r\n                {/* Read/Write Buttons */}\r\n                <div>\r\n                    <button onClick={this.readEeprom} disabled={this.state.eeprom_operation_in_progress}>Read All Data</button>\r\n                    <button onClick={this.writeEeprom} disabled={this.state.eeprom_operation_in_progress}>Write All Data</button>\r\n                    <button onClick={this.eraseFlashData} disabled={!this.state.erase_function_enabled || this.state.eeprom_operation_in_progress}>Erase All Data</button>\r\n                </div>\r\n                \r\n                {/* Import/Export values from file */}\r\n                <div>\r\n                    <input type=\"file\" accept=\".json\" autoComplete=\"off\" onChange={this.handleFileInputChange} disabled={this.state.eeprom_operation_in_progress}/>\r\n                    <div>\r\n                        <button onClick={this.getValuesFromFile} disabled={this.state.eeprom_operation_in_progress}>Import Values from File</button>\r\n                        <button onClick={this.saveValuesToFile} disabled={this.state.eeprom_operation_in_progress}>Export Values to File</button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Show/Hide Eeprom Progress Bar */}\r\n                {this.state.eeprom_operation_in_progress && ( \r\n                <ProgressBar message={this.state.progress_bar_message} percentage={this.state.eeprom_progress_percentage}/>\r\n                )}   \r\n                \r\n                {/* All Eeprom Fields */}\r\n                {EepromJSON.array.map(e => \r\n                    <InputFieldTypes key={e.name} eeprom_field={e} current_value={this.state[e.name]} on_update_value={this.updateStateFromChild} />          \r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EepromFields","import React, { Component } from \"react\";\r\nimport device_connecting_svg from './device_connecting.svg';\r\nimport EepromFields from './EepromFields.js'\r\nimport './App_AJ.css';\r\n\r\n//conversion\r\nlet enc = new TextDecoder(\"utf-8\");\r\n\r\n//expected characteristic UUIDs\r\nconst btZioServiceUUID = '16d30bc1-f148-49bd-b127-8042df63ded0'\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    statusMessage: \"Click Connect to Begin\",\r\n    device_connected: false,\r\n    device_connecting: false,\r\n    firmware_version: \"reading...\",\r\n    device_name: null,\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('Zio Setup Centre v0.15');\r\n  }\r\n\r\n  \r\n  //process to begin pairing\r\n  pairDevice = () => {\r\n    \r\n    this.setState({\r\n      statusMessage: 'Pairing...',\r\n      device_connecting: true,\r\n      pairedDevice: null,\r\n    })\r\n\r\n    //connect to device then get firmware revision\r\n    navigator.bluetooth.requestDevice({\r\n      filters: [{\r\n        services: ['device_information']\r\n      }],\r\n      optionalServices: [btZioServiceUUID]\r\n    })\r\n    .then(device => {\r\n      device.addEventListener('gattserverdisconnected', this.disconnectDevice);\r\n      console.log(\"pairedDevice\", device);\r\n      this.setState({ \r\n        device_name: device.name, \r\n        pairedDevice: device,\r\n      })\r\n      return device.gatt.connect();\r\n    })\r\n    .then(server => {\r\n      return server.getPrimaryService('device_information');\r\n    })\r\n    .then(service => {\r\n      return service.getCharacteristic('firmware_revision_string');\r\n    })  \r\n    .then(characteristic => {\r\n      return characteristic.readValue();\r\n    })\r\n    .then(value => {\r\n      this.setState({\r\n        firmware_version: 'v' + enc.decode(value),\r\n        statusMessage: 'Connected to ' + this.state.device_name,\r\n      });\r\n      this.deviceDidConnect();\r\n    })\r\n    .catch(error => { \r\n      console.error(\"Connection failed\", error);\r\n      \r\n      this.disconnectDevice();\r\n    });\r\n  }\r\n\r\n  //process after connection\r\n  deviceDidConnect = async () => {\r\n    this.setState({\r\n      device_connecting: false,\r\n      device_connected: true,\r\n      reading_eeprom: true,\r\n      reading_eeprom_progress: 0,\r\n    })\r\n  }\r\n\r\n  //process to disconnect\r\n  disconnectDevice = () => {\r\n    if(this.state.pairedDevice != null){\r\n      this.state.pairedDevice.gatt.disconnect();\r\n      console.log('Device ' + this.state.device_name + ' is disconnected');      \r\n    }\r\n    this.setState({\r\n      device_connected: false,\r\n      device_connecting: false,\r\n      statusMessage: 'Click Connect to Begin',\r\n      device_name: null,\r\n      pairedDevice: null,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <h1>Welcome to the Zio Setup Centre</h1>\r\n          <div>{this.state.statusMessage}</div><br/>\r\n        </header>\r\n\r\n        <div className=\"connect-options\">\r\n\r\n          {/* Show/Hide Connect Button */}\r\n          {!this.state.device_connected && !this.state.device_connecting && ( \r\n          <button className=\"button\" onClick={this.pairDevice}>Connect</button>\r\n          )}\r\n\r\n          {/* Show/Hide Connecting svg */}\r\n          {!this.state.device_connected && this.state.device_connecting && ( \r\n          <img src={device_connecting_svg} alt=\"connecting\" />\r\n          )}       \r\n\r\n          {/* Show/Hide Disconnect Button */}\r\n          {this.state.device_connected && !this.state.device_connecting && ( \r\n          <button className=\"button\" onClick={this.disconnectDevice}>Disconnect</button>\r\n          )}\r\n\r\n        </div>\r\n\r\n        {/* Firmware updater */}\r\n        <div className=\"firmware-updater\">\r\n          {/* Show/Hide Fields */}\r\n          {this.state.device_connected && ( \r\n          <div>\r\n            <h2>Firmware Version: {this.state.firmware_version}</h2>\r\n            <p>For an online tool to update the firmware version please <a href=\"https://thegecko.github.io/web-bluetooth-dfu/examples/web.html\">click here</a></p>\r\n          </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Fields to be edited */}\r\n        <div className=\"eeprom-fields\">\r\n          {/* Show/Hide Fields */}\r\n          {this.state.device_connected && ( \r\n          <EepromFields device={this.state.pairedDevice}/>\r\n          )}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/device_connecting.c594fc6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_icon.e0e4b6b3.png\";"],"sourceRoot":""}